// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    phone         String?
    role          String?       @default("VIEW")
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Listings      Listing[]
    reservations  Reservation[]
}

model Listing {
    id           String        @id @default(cuid())
    type         String
    status       String        @default("Active")
    name         String
    description  String
    street       String
    city         String
    province     String
    approve      String     @default("Pending")
    price        Int        @default(0)
    images       Image[]
    reservations Reservation[]
    Amenties  String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}


model Reservation {
    id        String   @id @default(cuid())
    startDate DateTime
    endDate   DateTime
    status    String   @default("Pending")
    userId    String
    listingId String
    hostId    String
    adults    Int
    children  Int
    rooms     Int
    price     Int
    createdAt DateTime @default(now())

    Listing Listing @relation(fields: [listingId], references: [id])
    User    User    @relation(fields: [userId], references: [id])

    @@unique([userId, listingId, startDate, endDate]) // Ensure unique reservations for the same period
}

model Image {
    //? This id is the uploadThing fileKey
    id        String  @id
    url       String  @unique
    listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
