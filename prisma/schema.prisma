generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          String?       @default("VIEW")
  accounts      Account[]
  Listings      Listing[]
  posts         Post[]
  reservations  Reservation[]
  sessions      Session[]
}

model Listing {
    id           String        @id @default(cuid())
    type         String
    status       String        @default("Active")
    name         String
    description  String
    street       String
    city         String
    province     String
    approve      String     @default("Pending")
    price        Int        @default(0)
    images       Image[]
    reservations Reservation[]
    Amenties  String[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
}


model Reservation {
  id        String   @id @default(cuid())
  startDate DateTime
  endDate   DateTime
  status    String   @default("Pending")
  userId    String
  listingId String
  hostId    String
  adults    Int
  children  Int
  rooms     Int
  price     Int
  createdAt DateTime @default(now())
  Listing   Listing  @relation(fields: [listingId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, listingId, startDate, endDate])
}

model Image {
    //? This id is the uploadThing fileKey
    id        String  @id
    url       String  @unique
    listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
